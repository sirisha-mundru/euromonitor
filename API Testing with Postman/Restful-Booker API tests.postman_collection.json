{
	"info": {
		"_postman_id": "244466fd-eb4d-4f22-a3ed-47001ac80aca",
		"name": "Restful-Booker API tests",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "23567044"
	},
	"item": [
		{
			"name": "Auth",
			"item": [
				{
					"name": "Create Token",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = JSON.parse(responseBody);",
									"postman.setEnvironmentVariable(\"token\", jsonData.token);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"username\" : \"admin\",\n    \"password\" : \"password123\"\n}"
						},
						"url": {
							"raw": "{{baseURL}}/auth",
							"host": [
								"{{baseURL}}"
							],
							"path": [
								"auth"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Booking",
			"item": [
				{
					"name": "Booking - GetBooking",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"//Response status",
									"pm.test('Status code is 200', function() {",
									"    pm.response.to.have.status(200);",
									"    pm.response.to.be.ok;",
									"});",
									"",
									"//Response headers",
									"pm.test(\"Header Server is Cowboy\", function () {",
									"    pm.response.to.have.header(\"Server\", \"Cowboy\");",
									"});",
									"",
									"pm.test(\"Header Content-Type is present\", function () {",
									"    pm.response.to.have.header(\"Content-Type\", \"application/json; charset=utf-8\");",
									"",
									"});",
									"",
									"//Response body",
									"pm.test(\"Response is a JSON\", function () {",
									"    pm.response.to.have.jsonBody();",
									"});",
									"",
									"var response = JSON.parse(responseBody);",
									"pm.test(\"Response schema is correct\", function() {",
									"    pm.expect(response.hasOwnProperty('firstname')).to.be.true;",
									"    pm.expect(response.hasOwnProperty('lastname')).to.be.true;",
									"    pm.expect(response.hasOwnProperty('totalprice')).to.be.true;",
									"    pm.expect(response.hasOwnProperty('depositpaid')).to.be.true;",
									"    pm.expect(response.hasOwnProperty('bookingdates')).to.be.true;",
									"    pm.expect(response.bookingdates.hasOwnProperty('checkin')).to.be.true;",
									"    pm.expect(response.bookingdates.hasOwnProperty('checkout')).to.be.true;",
									"    pm.expect(response.hasOwnProperty('additionalneeds')).to.be.true;",
									"});",
									"",
									"pm.test(\"JSON values are correct types\", function () {",
									"    pm.expect(typeof(response.firstname)).to.eql('string');",
									"    pm.expect(typeof(response.lastname)).to.eql('string');",
									"    pm.expect(typeof(response.totalprice)).to.eql('number');",
									"    pm.expect(typeof(response.depositpaid)).to.eql('boolean');",
									"    pm.expect(typeof(response.bookingdates.checkin)).to.eql('string');",
									"    pm.expect(typeof(response.bookingdates.checkout)).to.eql('string');",
									"    pm.expect(typeof(response.additionalneeds)).to.eql('string');",
									"});",
									"",
									"//Performance",
									"pm.test(\"Response time is less than 1000ms\", function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(1000);",
									"});",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseURL}}/booking/13557",
							"host": [
								"{{baseURL}}"
							],
							"path": [
								"booking",
								"13557"
							]
						}
					},
					"response": []
				},
				{
					"name": "Booking- GetBookingIds",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"//Response status",
									"pm.test('Status code is 200', function() {",
									"    pm.response.to.have.status(200);",
									"    pm.response.to.be.ok;",
									"});",
									"",
									"//Response headers",
									"pm.test(\"Header Server is Cowboy\", function () {",
									"    pm.response.to.have.header(\"Server\", \"Cowboy\");",
									"});",
									"",
									"pm.test(\"Header Content-Type is present\", function () {",
									"    pm.response.to.have.header(\"Content-Type\", \"application/json; charset=utf-8\");",
									"});",
									"",
									"//Response body",
									"pm.test(\"Response body is a JSON\", function () {",
									"    pm.response.to.have.jsonBody();",
									"});",
									"//Check json value = number",
									"pm.test(\"JSON value is a number\", function () {",
									"    var jsonData = pm.response.json();",
									"    jsonData.forEach((booking) => pm.expect(typeof(booking.bookingid)).to.eql('number'));",
									"});",
									"",
									"//Performance",
									"pm.test(\"Response time is less than 1000ms\", function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(1000);",
									"});",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseURL}}/booking",
							"host": [
								"{{baseURL}}"
							],
							"path": [
								"booking"
							],
							"query": [
								{
									"key": "checkin",
									"value": "2019-02-01",
									"disabled": true
								},
								{
									"key": "checkout",
									"value": "2020-03-11",
									"disabled": true
								},
								{
									"key": "firstname",
									"value": "Alice",
									"disabled": true
								},
								{
									"key": "lastname",
									"value": "McDrive",
									"disabled": true
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Booking - CreateBooking",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = JSON.parse(responseBody);",
									"postman.setEnvironmentVariable(\"bookingId\", jsonData.bookingid);",
									"",
									"//Response status",
									"pm.test('Status code is 200', function() {",
									"    pm.response.to.have.status(200);",
									"    pm.response.to.be.ok;",
									"});",
									"",
									"//Response headers",
									"pm.test(\"Header Server is Cowboy\", function () {",
									"    pm.response.to.have.header(\"Server\", \"Cowboy\");",
									"});",
									"",
									"pm.test(\"Header Content-Type is present\", function () {",
									"    pm.response.to.have.header(\"Content-Type\", \"application/json; charset=utf-8\");",
									"});",
									"",
									"//Response body",
									"pm.test(\"Response body is a JSON\", function () {",
									"    pm.response.to.have.jsonBody();",
									"});",
									"",
									"var response = JSON.parse(responseBody);",
									"pm.test(\"Response schema is correct\", function() {",
									"    pm.expect(response.hasOwnProperty('bookingid')).to.be.true;",
									"    pm.expect(response.booking.hasOwnProperty('firstname')).to.be.true;",
									"    pm.expect(response.booking.hasOwnProperty('lastname')).to.be.true;",
									"    pm.expect(response.booking.hasOwnProperty('totalprice')).to.be.true;",
									"    pm.expect(response.booking.hasOwnProperty('depositpaid')).to.be.true;",
									"    pm.expect(response.booking.hasOwnProperty('bookingdates')).to.be.true;",
									"    pm.expect(response.booking.bookingdates.hasOwnProperty('checkin')).to.be.true;",
									"    pm.expect(response.booking.bookingdates.hasOwnProperty('checkout')).to.be.true;",
									"    pm.expect(response.booking.hasOwnProperty('additionalneeds')).to.be.true;",
									"});",
									"",
									"pm.test(\"JSON values are correct types\", function () {",
									"    pm.expect(typeof(response.bookingid)).to.eql('number');",
									"    pm.expect(typeof(response.booking)).to.eql('object');",
									"    pm.expect(typeof(response.booking.firstname)).to.eql('string');",
									"    pm.expect(typeof(response.booking.lastname)).to.eql('string');",
									"    pm.expect(typeof(response.booking.totalprice)).to.eql('number');",
									"    pm.expect(typeof(response.booking.depositpaid)).to.eql('boolean');",
									"    pm.expect(typeof(response.booking.bookingdates.checkin)).to.eql('string');",
									"    pm.expect(typeof(response.booking.bookingdates.checkout)).to.eql('string');",
									"    pm.expect(typeof(response.booking.additionalneeds)).to.eql('string');",
									"});",
									"",
									"//Performance",
									"pm.test(\"Response time is less than 1000ms\", function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(1000);",
									"});",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disabledSystemHeaders": {}
					},
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"type": "text",
								"value": "application/json"
							},
							{
								"key": "Accept",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"firstname\" : \"Alice123\",\n    \"lastname\" : \"McDrive\",\n    \"totalprice\" : 1450,\n    \"depositpaid\" : true,\n    \"bookingdates\" : {\n        \"checkin\" : \"2019-01-06\",\n        \"checkout\" : \"2019-01-10\"\n    },\n    \"additionalneeds\" : \"Lunch\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseURL}}/booking",
							"host": [
								"{{baseURL}}"
							],
							"path": [
								"booking"
							]
						}
					},
					"response": []
				},
				{
					"name": "Booking - UpdateBooking",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"//Response status",
									"pm.test('Status code is 200', function() {",
									"    pm.response.to.have.status(200);",
									"    pm.response.to.be.ok;",
									"});",
									"",
									"//Response headers",
									"pm.test(\"Header Server is Cowboy\", function () {",
									"    pm.response.to.have.header(\"Server\", \"Cowboy\");",
									"});",
									"",
									"pm.test(\"Header Content-Type is present\", function () {",
									"    pm.response.to.have.header(\"Content-Type\", \"application/json; charset=utf-8\");",
									"});",
									"",
									"//Response body",
									"pm.test(\"Response is a JSON\", function () {",
									"    pm.response.to.have.jsonBody();",
									"});",
									"",
									"var response = JSON.parse(responseBody);",
									"pm.test(\"Response schema is correct\", function() {",
									"    pm.expect(response.hasOwnProperty('firstname')).to.be.true;",
									"    pm.expect(response.hasOwnProperty('lastname')).to.be.true;",
									"    pm.expect(response.hasOwnProperty('totalprice')).to.be.true;",
									"    pm.expect(response.hasOwnProperty('depositpaid')).to.be.true;",
									"    pm.expect(response.hasOwnProperty('bookingdates')).to.be.true;",
									"    pm.expect(response.bookingdates.hasOwnProperty('checkin')).to.be.true;",
									"    pm.expect(response.bookingdates.hasOwnProperty('checkout')).to.be.true;",
									"    pm.expect(response.hasOwnProperty('additionalneeds')).to.be.true;",
									"});",
									"",
									"pm.test(\"JSON values are correct types\", function () {",
									"    pm.expect(typeof(response.firstname)).to.eql('string');",
									"    pm.expect(typeof(response.lastname)).to.eql('string');",
									"    pm.expect(typeof(response.totalprice)).to.eql('number');",
									"    pm.expect(typeof(response.depositpaid)).to.eql('boolean');",
									"    pm.expect(typeof(response.bookingdates.checkin)).to.eql('string');",
									"    pm.expect(typeof(response.bookingdates.checkout)).to.eql('string');",
									"    pm.expect(typeof(response.additionalneeds)).to.eql('string');",
									"});",
									"",
									"pm.test(\"Check if lastname is Brown\", function () {",
									"    pm.expect(response.lastname).to.eql(\"Brown\");",
									"});",
									"",
									"pm.test(\"Body is correct\", function () {",
									"    pm.response.to.have.body('{\"firstname\":\"James\",\"lastname\":\"Brown\",\"totalprice\":111,\"depositpaid\":true,\"bookingdates\":{\"checkin\":\"2018-01-01\",\"checkout\":\"2019-01-01\"},\"additionalneeds\":\"Breakfast\"}');",
									"});",
									"",
									"//Performance",
									"pm.test(\"Response time is less than 1000ms\", function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(1000);",
									"});",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Content-Type",
								"type": "text",
								"value": "application/json"
							},
							{
								"key": "Accept",
								"type": "text",
								"value": "application/json"
							},
							{
								"key": "Cookie",
								"type": "text",
								"value": "token={{token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"firstname\" : \"James223\",\n    \"lastname\" : \"Brown\",\n    \"totalprice\" : 111,\n    \"depositpaid\" : true,\n    \"bookingdates\" : {\n        \"checkin\" : \"2018-01-01\",\n        \"checkout\" : \"2019-01-01\"\n    },\n    \"additionalneeds\" : \"Breakfast\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseURL}}/booking/13557",
							"host": [
								"{{baseURL}}"
							],
							"path": [
								"booking",
								"13557"
							]
						}
					},
					"response": []
				},
				{
					"name": "Booking - PartialUpdateBooking",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"//Response status",
									"pm.test('Status code is 200', function() {",
									"    pm.response.to.have.status(200);",
									"    pm.response.to.be.ok;",
									"});",
									"",
									"//Response headers",
									"pm.test(\"Header Server is Cowboy\", function () {",
									"    pm.response.to.have.header(\"Server\", \"Cowboy\");",
									"});",
									"",
									"pm.test(\"Header Content-Type is present\", function () {",
									"    pm.response.to.have.header(\"Content-Type\", \"application/json; charset=utf-8\");",
									"});",
									"",
									"//Response body",
									"pm.test(\"Response is a JSON\", function () {",
									"    pm.response.to.have.jsonBody();",
									"});",
									"",
									"var response = JSON.parse(responseBody);",
									"pm.test(\"Response schema is correct\", function() {",
									"    pm.expect(response.hasOwnProperty('firstname')).to.be.true;",
									"    pm.expect(response.hasOwnProperty('lastname')).to.be.true;",
									"    pm.expect(response.hasOwnProperty('totalprice')).to.be.true;",
									"    pm.expect(response.hasOwnProperty('depositpaid')).to.be.true;",
									"    pm.expect(response.hasOwnProperty('bookingdates')).to.be.true;",
									"    pm.expect(response.bookingdates.hasOwnProperty('checkin')).to.be.true;",
									"    pm.expect(response.bookingdates.hasOwnProperty('checkout')).to.be.true;",
									"    pm.expect(response.hasOwnProperty('additionalneeds')).to.be.true;",
									"});",
									"",
									"pm.test(\"JSON values are correct types\", function () {",
									"    pm.expect(typeof(response.firstname)).to.eql('string');",
									"    pm.expect(typeof(response.lastname)).to.eql('string');",
									"    pm.expect(typeof(response.totalprice)).to.eql('number');",
									"    pm.expect(typeof(response.depositpaid)).to.eql('boolean');",
									"    pm.expect(typeof(response.bookingdates.checkin)).to.eql('string');",
									"    pm.expect(typeof(response.bookingdates.checkout)).to.eql('string');",
									"    pm.expect(typeof(response.additionalneeds)).to.eql('string');",
									"});",
									"",
									"pm.test(\"Check if lastname is McDrive\", function () {",
									"    pm.expect(response.lastname).to.eql(\"McDrive\");",
									"});",
									"",
									"pm.test(\"Body is correct\", function () {",
									"    pm.response.to.have.body('{\"firstname\":\"Alice\",\"lastname\":\"McDrive\",\"totalprice\":111,\"depositpaid\":true,\"bookingdates\":{\"checkin\":\"2018-01-01\",\"checkout\":\"2019-01-01\"},\"additionalneeds\":\"Breakfast in bed\"}');",
									"});",
									"",
									"//Performance",
									"pm.test(\"Response time is less than 1000ms\", function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(1000);",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PATCH",
						"header": [
							{
								"key": "Content-Type",
								"type": "text",
								"value": "application/json"
							},
							{
								"key": "Accept",
								"type": "text",
								"value": "application/json"
							},
							{
								"key": "Cookie",
								"type": "text",
								"value": "token={{token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"firstname\" : \"Alice\",\n    \"lastname\" : \"McDrive\",\n    \"additionalneeds\": \"Breakfast in bed\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseURL}}/booking/13557",
							"host": [
								"{{baseURL}}"
							],
							"path": [
								"booking",
								"13557"
							]
						}
					},
					"response": []
				},
				{
					"name": "Booking - DeleteBooking",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"//Response status",
									"pm.test('Status code is 201', function() {",
									"    pm.response.to.have.status(201);",
									"});",
									"",
									"//Response headers",
									"pm.test(\"Header Server is Cowboy\", function () {",
									"    pm.response.to.have.header(\"Server\", \"Cowboy\");",
									"});",
									"",
									"pm.test(\"Header Content-Type is present\", function () {",
									"    pm.response.to.have.header(\"Content-Type\", \"text/plain; charset=utf-8\");",
									"});",
									"",
									"//Response body",
									"pm.test(\"Body message is `Created`\", function () {",
									"    pm.response.to.have.body('Created');",
									"});",
									"",
									"//Performance",
									"pm.test(\"Response time is less than 1000ms\", function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(1000);",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Content-Type",
								"type": "text",
								"value": "application/json"
							},
							{
								"key": "Cookie",
								"type": "text",
								"value": "token={{token}}"
							}
						],
						"url": {
							"raw": "{{baseURL}}/booking/14257",
							"host": [
								"{{baseURL}}"
							],
							"path": [
								"booking",
								"14257"
							]
						}
					},
					"response": []
				}
			],
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				}
			]
		},
		{
			"name": "Ping",
			"item": [
				{
					"name": "Ping - HealthCheck",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseURL}}/ping",
							"host": [
								"{{baseURL}}"
							],
							"path": [
								"ping"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Negative Scenarios",
			"item": [
				{
					"name": "Create Auth Token with Invalid Credentials",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = JSON.parse(responseBody);",
									"postman.setEnvironmentVariable(\"token\", jsonData.token);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"username\" : \"admin\",\n    \"password\" : \"password1234\"\n}"
						},
						"url": {
							"raw": "{{baseURL}}/auth",
							"host": [
								"{{baseURL}}"
							],
							"path": [
								"auth"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create booking with missing parameters",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"//Response status",
									"pm.test('Status code is 400', function() {",
									"    pm.response.to.have.status(400);",
									"});",
									"",
									"//Response headers",
									"pm.test(\"Header Server is Cowboy\", function () {",
									"    pm.response.to.have.header(\"Server\", \"Cowboy\");",
									"});",
									"",
									"pm.test(\"Header Content-Type is present\", function () {",
									"    pm.response.to.have.header(\"Content-Type\", \"text/plain; charset=utf-8\");",
									"});",
									"",
									"//Response body",
									"pm.test(\"Body message is `Bad Request`\", function () {",
									"    pm.response.to.have.body('Bad Request');",
									"});",
									"",
									"//Performance",
									"pm.test(\"Response time is less than 1000ms\", function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(1000);",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Accept",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"firstname\" : \"John\",\n    \"lastname\" : ,\n    \"totalprice\" : ,\n    \"depositpaid\" : true,\n    \"bookingdates\" : {\n        \"checkin\" : \"2018-01-06\",\n        \"checkout\" : \"2018-01-10\"\n    },\n    \"additionalneeds\" : \"Breakfast\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseURL}}/booking",
							"host": [
								"{{baseURL}}"
							],
							"path": [
								"booking"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create booking with invalid parameters - wrong firstname",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"//Response status",
									"pm.test('Status code is 500', function() {",
									"    pm.response.to.have.status(500);",
									"});",
									"",
									"//Response headers",
									"pm.test(\"Header Server is Cowboy\", function () {",
									"    pm.response.to.have.header(\"Server\", \"Cowboy\");",
									"});",
									"",
									"pm.test(\"Header Content-Type is present\", function () {",
									"    pm.response.to.have.header(\"Content-Type\", \"text/plain; charset=utf-8\");",
									"});",
									"",
									"//Response body",
									"pm.test(\"Body message is `Internal Server Error`\", function () {",
									"    pm.response.to.have.body('Internal Server Error');",
									"});",
									"",
									"//Performance",
									"pm.test(\"Response time is less than 1000ms\", function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(1000);",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Accept",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"firstname\" : 123,\n    \"lastname\" : \"Brown\",\n    \"totalprice\" : 126,\n    \"depositpaid\" : true,\n    \"bookingdates\" : {\n        \"checkin\" : \"2018-01-06\",\n        \"checkout\" : \"2018-01-10\"\n    },\n    \"additionalneeds\" : \"Breakfast\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseURL}}/booking",
							"host": [
								"{{baseURL}}"
							],
							"path": [
								"booking"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create booking with invalid parameters - wrong totalprice",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = JSON.parse(responseBody);",
									"postman.setEnvironmentVariable(\"bookingId\", jsonData.bookingid);",
									"",
									"//Response status",
									"pm.test('Status code is 200', function() {",
									"    pm.response.to.have.status(200);",
									"    pm.response.to.be.ok;",
									"});",
									"",
									"//Response headers",
									"pm.test(\"Header Server is Cowboy\", function () {",
									"    pm.response.to.have.header(\"Server\", \"Cowboy\");",
									"});",
									"",
									"pm.test(\"Header Content-Type is present\", function () {",
									"    pm.response.to.have.header(\"Content-Type\", \"application/json; charset=utf-8\");",
									"});",
									"",
									"//Response body",
									"pm.test(\"Response is a JSON\", function () {",
									"    pm.response.to.have.jsonBody();",
									"});",
									"",
									"var response = JSON.parse(responseBody);",
									"pm.test(\"Response schema is correct\", function() {",
									"    pm.expect(response.hasOwnProperty('bookingid')).to.be.true;",
									"    pm.expect(response.booking.hasOwnProperty('firstname')).to.be.true;",
									"    pm.expect(response.booking.hasOwnProperty('lastname')).to.be.true;",
									"    pm.expect(response.booking.hasOwnProperty('totalprice')).to.be.true;",
									"    pm.expect(response.booking.hasOwnProperty('depositpaid')).to.be.true;",
									"    pm.expect(response.booking.hasOwnProperty('bookingdates')).to.be.true;",
									"    pm.expect(response.booking.bookingdates.hasOwnProperty('checkin')).to.be.true;",
									"    pm.expect(response.booking.bookingdates.hasOwnProperty('checkout')).to.be.true;",
									"    pm.expect(response.booking.hasOwnProperty('additionalneeds')).to.be.true;",
									"});",
									"",
									"pm.test(\"JSON values are correct types\", function () {",
									"    pm.expect(typeof(response.bookingid)).to.eql('number');",
									"    pm.expect(typeof(response.booking)).to.eql('object');",
									"    pm.expect(typeof(response.booking.firstname)).to.eql('string');",
									"    pm.expect(typeof(response.booking.lastname)).to.eql('string');",
									"    pm.expect(response.booking.totalprice).to.be.null;",
									"    pm.expect(typeof(response.booking.depositpaid)).to.eql('boolean');",
									"    pm.expect(typeof(response.booking.bookingdates.checkin)).to.eql('string');",
									"    pm.expect(typeof(response.booking.bookingdates.checkout)).to.eql('string');",
									"    pm.expect(typeof(response.booking.additionalneeds)).to.eql('string');",
									"});",
									"",
									"//Performance",
									"pm.test(\"Response time is less than 1000ms\", function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(1000);",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Accept",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"firstname\" : \"John\",\n    \"lastname\" : \"Brown\",\n    \"totalprice\" : billion dollars,\n    \"depositpaid\" : true,\n    \"bookingdates\" : {\n        \"checkin\" : \"2018-01-06\",\n        \"checkout\" : \"2018-01-10\"\n    },\n    \"additionalneeds\" : \"Breakfast\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseURL}}/booking",
							"host": [
								"{{baseURL}}"
							],
							"path": [
								"booking"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create Booking without any parameters",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"//Response status",
									"pm.test('Status code is 500', function() {",
									"    pm.response.to.have.status(500);",
									"});",
									"",
									"//Response headers",
									"pm.test(\"Header Server is Cowboy\", function () {",
									"    pm.response.to.have.header(\"Server\", \"Cowboy\");",
									"});",
									"",
									"pm.test(\"Header Content-Type is present\", function () {",
									"    pm.response.to.have.header(\"Content-Type\", \"text/plain; charset=utf-8\");",
									"});",
									"",
									"//Response body",
									"pm.test(\"Body message is `Internal Server Error`\", function () {",
									"    pm.response.to.have.body('Internal Server Error');",
									"});",
									"",
									"//Performance",
									"pm.test(\"Response time is less than 1000ms\", function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(1000);",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"url": {
							"raw": "{{baseURL}}/booking",
							"host": [
								"{{baseURL}}"
							],
							"path": [
								"booking"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create booking with invalid parameters - wrong depositpaid",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = JSON.parse(responseBody);",
									"postman.setEnvironmentVariable(\"bookingId\", jsonData.bookingid);",
									"",
									"//Response status",
									"pm.test('Status code is 200', function() {",
									"    pm.response.to.have.status(200);",
									"    pm.response.to.be.ok;",
									"});",
									"",
									"//Response headers",
									"pm.test(\"Header Server is Cowboy\", function () {",
									"    pm.response.to.have.header(\"Server\", \"Cowboy\");",
									"});",
									"",
									"pm.test(\"Header Content-Type is present\", function () {",
									"    pm.response.to.have.header(\"Content-Type\", \"application/json; charset=utf-8\");",
									"});",
									"",
									"//Response body",
									"pm.test(\"Response is a JSON\", function () {",
									"    pm.response.to.have.jsonBody();",
									"});",
									"",
									"var response = JSON.parse(responseBody);",
									"pm.test(\"Response schema is correct\", function() {",
									"    pm.expect(response.hasOwnProperty('bookingid')).to.be.true;",
									"    pm.expect(response.booking.hasOwnProperty('firstname')).to.be.true;",
									"    pm.expect(response.booking.hasOwnProperty('lastname')).to.be.true;",
									"    pm.expect(response.booking.hasOwnProperty('totalprice')).to.be.true;",
									"    pm.expect(response.booking.hasOwnProperty('depositpaid')).to.be.true;",
									"    pm.expect(response.booking.hasOwnProperty('bookingdates')).to.be.true;",
									"    pm.expect(response.booking.bookingdates.hasOwnProperty('checkin')).to.be.true;",
									"    pm.expect(response.booking.bookingdates.hasOwnProperty('checkout')).to.be.true;",
									"    pm.expect(response.booking.hasOwnProperty('additionalneeds')).to.be.true;",
									"});",
									"",
									"pm.test(\"JSON values are correct types\", function () {",
									"    pm.expect(typeof(response.bookingid)).to.eql('number');",
									"    pm.expect(typeof(response.booking)).to.eql('object');",
									"    pm.expect(typeof(response.booking.firstname)).to.eql('string');",
									"    pm.expect(typeof(response.booking.lastname)).to.eql('string');",
									"    pm.expect(typeof(response.booking.totalprice)).to.eql('number');",
									"    pm.expect(typeof(response.booking.depositpaid)).to.eql('boolean');",
									"    pm.expect(typeof(response.booking.bookingdates.checkin)).to.eql('string');",
									"    pm.expect(typeof(response.booking.bookingdates.checkout)).to.eql('string');",
									"    pm.expect(typeof(response.booking.additionalneeds)).to.eql('string');",
									"});",
									"pm.test(\"Check if depositpaid is true\", function () {",
									"    pm.expect(response.booking.depositpaid).to.be.true;",
									"});",
									"",
									"//Performance",
									"pm.test(\"Response time is less than 1000ms\", function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(1000);",
									"});",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"type": "text",
								"value": "application/json"
							},
							{
								"key": "Accept",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"firstname\" : \"John\",\n    \"lastname\" : \"Brown\",\n    \"totalprice\" : 165,\n    \"depositpaid\" : 123,\n    \"bookingdates\" : {\n        \"checkin\" : \"2018-01-06\",\n        \"checkout\" : \"2018-01-10\"\n    },\n    \"additionalneeds\" : \"Breakfast\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseURL}}/booking",
							"host": [
								"{{baseURL}}"
							],
							"path": [
								"booking"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create booking with invalid parameters - Wrong bookingdates",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"//Response status",
									"pm.test('Status code is 200', function() {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"//Response headers",
									"pm.test(\"Header Server is Cowboy\", function () {",
									"    pm.response.to.have.header(\"Server\", \"Cowboy\");",
									"});",
									"",
									"pm.test(\"Header Content-Type is present\", function () {",
									"    pm.response.to.have.header(\"Content-Type\", \"text/html; charset=utf-8\");",
									"});",
									"",
									"//Response body",
									"pm.test(\"Body message is `Invalid date`\", function () {",
									"    pm.response.to.have.body('Invalid date');",
									"});",
									"",
									"//Performance",
									"pm.test(\"Response time is less than 1000ms\", function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(1000);",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"type": "text",
								"value": "application/json"
							},
							{
								"key": "Accept",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"firstname\" : \"John\",\n    \"lastname\" : \"Brown\",\n    \"totalprice\" : 243,\n    \"depositpaid\" : true,\n    \"bookingdates\" : {\n        \"checkin\" : \"24.12.2016\",\n        \"checkout\" : \"26.12.2016\"\n    },\n    \"additionalneeds\" : \"Breakfast\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseURL}}/booking",
							"host": [
								"{{baseURL}}"
							],
							"path": [
								"booking"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create booking with invalid model",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"//Response status",
									"pm.test('Status code is 500', function() {",
									"    pm.response.to.have.status(500);",
									"});",
									"",
									"//Response headers",
									"pm.test(\"Header Server is Cowboy\", function () {",
									"    pm.response.to.have.header(\"Server\", \"Cowboy\");",
									"});",
									"",
									"pm.test(\"Header Content-Type is present\", function () {",
									"    pm.response.to.have.header(\"Content-Type\", \"text/plain; charset=utf-8\");",
									"});",
									"",
									"//Response body",
									"pm.test(\"Body message is `Internal Server Error`\", function () {",
									"    pm.response.to.have.body('Internal Server Error');",
									"});",
									"",
									"//Performance",
									"pm.test(\"Response time is less than 1000ms\", function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(1000);",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Accept",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"petsname\" : \"dgfvetyr\",\n    \"dateofbirth\" : \"20122-03-31\",\n    \"additionalneeds\" : \"Lunch\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseURL}}/booking",
							"host": [
								"{{baseURL}}"
							],
							"path": [
								"booking"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get booking with invalid parameters - invalid Id",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"//Response status",
									"pm.test('Status code is 200', function() {",
									"    pm.response.to.have.status(200);",
									"    pm.response.to.be.ok;",
									"});",
									"",
									"//Response headers",
									"pm.test(\"Header Server is Cowboy\", function () {",
									"    pm.response.to.have.header(\"Server\", \"Cowboy\");",
									"});",
									"",
									"pm.test(\"Header Content-Type is present\", function () {",
									"    pm.response.to.have.header(\"Content-Type\", \"application/json; charset=utf-8\");",
									"});",
									"",
									"//Response body",
									"pm.test(\"Response is a JSON\", function () {",
									"    pm.response.to.have.jsonBody();",
									"});",
									"",
									"var response = JSON.parse(responseBody);",
									"pm.test(\"Response schema is correct\", function() {",
									"    pm.expect(response.hasOwnProperty('firstname')).to.be.true;",
									"    pm.expect(response.hasOwnProperty('lastname')).to.be.true;",
									"    pm.expect(response.hasOwnProperty('totalprice')).to.be.true;",
									"    pm.expect(response.hasOwnProperty('depositpaid')).to.be.true;",
									"    pm.expect(response.hasOwnProperty('bookingdates')).to.be.true;",
									"    pm.expect(response.bookingdates.hasOwnProperty('checkin')).to.be.true;",
									"    pm.expect(response.bookingdates.hasOwnProperty('checkout')).to.be.true;",
									"    pm.expect(response.hasOwnProperty('additionalneeds')).to.be.true;",
									"});",
									"",
									"pm.test(\"JSON values are correct types\", function () {",
									"    pm.expect(typeof(response.firstname)).to.eql('string');",
									"    pm.expect(typeof(response.lastname)).to.eql('string');",
									"    pm.expect(response.totalprice).to.be.null;",
									"    pm.expect(typeof(response.depositpaid)).to.eql('boolean');",
									"    pm.expect(typeof(response.bookingdates.checkin)).to.eql('string');",
									"    pm.expect(typeof(response.bookingdates.checkout)).to.eql('string');",
									"    pm.expect(typeof(response.additionalneeds)).to.eql('string');",
									"});",
									"",
									"//Performance",
									"pm.test(\"Response time is less than 1000ms\", function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(1000);",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseURL}}/booking/xyz",
							"host": [
								"{{baseURL}}"
							],
							"path": [
								"booking",
								"xyz"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get booking with invalid parameters - wrong depositpaid",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"//Response status, json, time",
									"pm.test('Status code is 200', function() {",
									"    pm.response.to.have.status(200);",
									"    pm.response.to.be.ok;",
									"});",
									"",
									"//Response headers",
									"pm.test(\"Header Server is Cowboy\", function () {",
									"    pm.response.to.have.header(\"Server\", \"Cowboy\");",
									"});",
									"",
									"pm.test(\"Header Content-Type is present\", function () {",
									"    pm.response.to.have.header(\"Content-Type\", \"application/json; charset=utf-8\");",
									"});",
									"",
									"",
									"//Response body",
									"pm.test(\"Response is a JSON\", function () {",
									"    pm.response.to.have.jsonBody();",
									"});",
									"",
									"var response = JSON.parse(responseBody);",
									"pm.test(\"Response schema is correct\", function() {",
									"    pm.expect(response.hasOwnProperty('firstname')).to.be.true;",
									"    pm.expect(response.hasOwnProperty('lastname')).to.be.true;",
									"    pm.expect(response.hasOwnProperty('totalprice')).to.be.true;",
									"    pm.expect(response.hasOwnProperty('depositpaid')).to.be.true;",
									"    pm.expect(response.hasOwnProperty('bookingdates')).to.be.true;",
									"    pm.expect(response.bookingdates.hasOwnProperty('checkin')).to.be.true;",
									"    pm.expect(response.bookingdates.hasOwnProperty('checkout')).to.be.true;",
									"    pm.expect(response.hasOwnProperty('additionalneeds')).to.be.true;",
									"});",
									"",
									"pm.test(\"JSON values are correct types\", function () {",
									"    pm.expect(typeof(response.firstname)).to.eql('string');",
									"    pm.expect(typeof(response.lastname)).to.eql('string');",
									"    pm.expect(typeof(response.totalprice)).to.eql('number');",
									"    pm.expect(typeof(response.depositpaid)).to.eql('boolean');",
									"    pm.expect(typeof(response.bookingdates.checkin)).to.eql('string');",
									"    pm.expect(typeof(response.bookingdates.checkout)).to.eql('string');",
									"    pm.expect(typeof(response.additionalneeds)).to.eql('string');",
									"});",
									"",
									"pm.test(\"Check if depositpaid is true\", function () {",
									"    pm.expect(response.depositpaid).to.be.true;",
									"});",
									"",
									"//Performance",
									"pm.test(\"Response time is less than 1000ms\", function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(1000);",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseURL}}/booking/?depositpaid=hello",
							"host": [
								"{{baseURL}}"
							],
							"path": [
								"booking",
								""
							],
							"query": [
								{
									"key": "depositpaid",
									"value": "hello"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Update booking with invalid booking id",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"//Response status",
									"pm.test('Status code is 403', function() {",
									"    pm.response.to.have.status(403);",
									"});",
									"",
									"//Response headers",
									"pm.test(\"Header Server is Cowboy\", function () {",
									"    pm.response.to.have.header(\"Server\", \"Cowboy\");",
									"});",
									"",
									"pm.test(\"Header Content-Type is present\", function () {",
									"    pm.response.to.have.header(\"Content-Type\", \"text/plain; charset=utf-8\");",
									"});",
									"",
									"//Response body",
									"pm.test(\"Body message is `Forbidden`\", function () {",
									"    pm.response.to.have.body('Forbidden');",
									"});",
									"",
									"//Performance",
									"pm.test(\"Response time is less than 1000ms\", function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(1000);",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Cookie",
								"type": "text",
								"value": "token=d225ffd317e7464"
							},
							{
								"key": "Content-Type",
								"type": "text",
								"value": "application/json"
							},
							{
								"key": "Accept",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"firstname\" : \"James\",\n    \"lastname\" : \"Brown\",\n    \"totalprice\" : 111,\n    \"depositpaid\" : true,\n    \"bookingdates\" : {\n        \"checkin\" : \"2018-01-01\",\n        \"checkout\" : \"2019-01-01\"\n    },\n    \"additionalneeds\" : \"Breakfast\"\n}"
						},
						"url": {
							"raw": "{{baseURL}}/booking/1",
							"host": [
								"{{baseURL}}"
							],
							"path": [
								"booking",
								"1"
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete booking that doesn’t exist",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"//Response status",
									"pm.test('Status code is 405', function() {",
									"    pm.response.to.have.status(405);",
									"});",
									"",
									"//Response headers",
									"pm.test(\"Header Server is Cowboy\", function () {",
									"    pm.response.to.have.header(\"Server\", \"Cowboy\");",
									"});",
									"",
									"pm.test(\"Header Content-Type is present\", function () {",
									"    pm.response.to.have.header(\"Content-Type\", \"text/plain; charset=utf-8\");",
									"});",
									"",
									"//Response body",
									"pm.test(\"Body message is `Method Not Allowed`\", function () {",
									"    pm.response.to.have.body('Method Not Allowed');",
									"});",
									"",
									"//Performance",
									"pm.test(\"Response time is less than 1000ms\", function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(1000);",
									"});",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Content-Type",
								"type": "text",
								"value": "application/json"
							},
							{
								"key": "Cookie",
								"type": "text",
								"value": "token={{token}}"
							}
						],
						"url": {
							"raw": "{{baseURL}}/436",
							"host": [
								"{{baseURL}}"
							],
							"path": [
								"436"
							]
						}
					},
					"response": []
				}
			]
		}
	]
}